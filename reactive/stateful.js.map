{"version":3,"sources":["reactive/subject.ts","reactive/stateful.ts"],"names":[],"mappings":"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","file":"stateful.js","sourceRoot":"src","sourcesContent":["// const Symbol = str => str + '_' + (Math.random() * 10).toFixed(3)\nconst subject = Symbol('subject')\n\ntype Callback<Args extends [] = any[], Result = any> = (...args: Args) => Result\n\ntype SubjectProperties<Types> = {\n  index: number\n  listeners: {\n    [k in keyof Types]: {\n      [l: string]: Callback<Types[k]>\n    }\n  }\n  cancels: {\n    [k: string]: Callback\n  }\n  key: () => string\n}\n\ntype GetElementType<T extends Array<any>> = T extends (infer U)[] ? U : never\n\nexport default class Subject<EventTypes = { [key: string]: Array<any> }> {\n  [subject]: SubjectProperties<EventTypes>\n\n  constructor() {\n    this[subject] = {\n      index: 0,\n      listeners: {},\n      cancels: {},\n      key() {\n        return `listener_${this[subject].index++}`\n      },\n    } as SubjectProperties<EventTypes>\n\n    // Bind all the methods\n    this.on = this.on.bind(this)\n    this[subject].key = this[subject].key.bind(this)\n    this.emit = this.emit.bind(this)\n    this.once = this.once.bind(this)\n    this.destroy = this.destroy.bind(this)\n  }\n\n  /* Listen to  */\n  on<Key extends keyof EventTypes>(\n    nameOrCallback: Key | Callback,\n    fn?: Callback<EventTypes[Key]>\n  ) {\n    let name = nameOrCallback as keyof EventTypes\n    let callback = fn as Callback | Callback<EventTypes[Key]>\n    if (!fn && typeof nameOrCallback === 'function') {\n      callback = nameOrCallback as Callback\n      /* Listen to all events */\n      name = (subject as unknown) as keyof EventTypes\n    }\n\n    // Every event listener is given it's own key\n    const key = this[subject].key()\n\n    const eventNames =\n      typeof name === 'string'\n        ? (name.split(' ') as (keyof EventTypes)[])\n        : [name]\n\n    for (const eventName of eventNames) {\n      // If this is the first listener of type eventName then listeners[eventName] will be empty\n      if (!this[subject].listeners[eventName])\n        this[subject].listeners[eventName] = {}\n\n      // Add the listener to the listener object\n      this[subject].listeners[eventName][key] = callback\n    }\n\n    // Cancel function deletes the listener and itself from Subject\n    let cancelled = false\n    let cancels = () => {\n      if (cancelled) return\n      cancels = () => {}\n      cancelled = true\n\n      for (const eventName of eventNames) {\n        delete this[subject].listeners[eventName][key]\n        delete this[subject].cancels[key]\n\n        if (!Object.keys(this[subject].listeners[eventName]).length) {\n          delete this[subject].listeners[eventName]\n        }\n      }\n    }\n\n    // Add cancel to the subject array\n    this[subject].cancels[key] = cancels\n\n    // Return the event diposer\n    return cancels\n  }\n\n  emit<T extends keyof EventTypes>(name: T, ...args: EventTypes[T]) {\n    // @ts-ignore\n    if (name !== subject) {\n      // @ts-ignore\n      this.emit(subject, ...args)\n    }\n    // If this even is in the listeners object\n    if (this[subject].listeners[name]) {\n      return Object.values(this[subject].listeners[name]).map((fn) =>\n        fn(...args)\n      )\n    }\n  }\n\n  getHandlers<T extends keyof EventTypes>(name: T) {\n    return {\n      get: () => {\n        const handlers: Callback<EventTypes[T]>[] = []\n        for (const key in this[subject].listeners[name]) {\n          handlers.push(this[subject].listeners[name][key])\n        }\n        return handlers\n      },\n      map: (fn: Callback<[Callback<EventTypes[T]>, string?]>) => {\n        const results = []\n        for (const key in this[subject].listeners[name]) {\n          const handler = this[subject].listeners[name][key]\n          results.push(fn(handler, key))\n        }\n        return results\n      },\n      forEach: (fn: Callback<[Callback<EventTypes[T]>, string?]>) => {\n        for (const key in this[subject].listeners[name]) {\n          const handler = this[subject].listeners[name][key]\n          fn(handler, key)\n        }\n      },\n      reduce: (\n        fn: Callback<[EventTypes[T][0], Callback<EventTypes[T]>, string?]>,\n        val?: EventTypes[T][0]\n      ) => {\n        let prev = val\n        for (const key in this[subject].listeners[name]) {\n          const handler = this[subject].listeners[name][key]\n          prev = fn(prev, handler, key)\n        }\n      },\n    }\n  }\n\n  reduce<T extends keyof EventTypes>(\n    name: T,\n    ...args: EventTypes[T]\n  ): EventTypes[T][0] {\n    const [value, ...rest] = args\n    let prev\n    if (this[subject].listeners[name]) {\n      return this.getHandlers(name).reduce((memo, fn) => {\n        const v = fn(memo, ...rest)\n        if (typeof v !== 'undefined') {\n          prev = v\n          return v\n        } else {\n          return prev\n        }\n      }, value)\n    }\n\n    return value\n  }\n\n  async asyncReduce<T extends keyof EventTypes>(\n    name: T,\n    ...args: EventTypes[T]\n  ): EventTypes[T][0] {\n    const [value, ...rest] = args\n    let prev\n    if (this[subject].listeners[name]) {\n      return Object.values(this[subject].listeners[name]).reduce((last, fn) => {\n        const v = fn(last, ...rest)\n        if (typeof v !== 'undefined') {\n          last = v\n          return v\n        }\n        return last\n      }, value)\n    }\n\n    return value\n  }\n\n  add<T extends keyof EventTypes>(eventName: T, fn: Callback<EventTypes[T]>) {\n    return this.on(eventName, fn)\n  }\n\n  once<T extends keyof EventTypes>(name: T, fn: Callback<EventTypes[T]>) {\n    // Use var to hoist variable (not sure if needed)\n    var cancel = this.on(name, (...args) => {\n      if (cancel) cancel()\n      fn(...args)\n    })\n  }\n\n  destroy() {\n    Object.values(this[subject].cancels).forEach((fn) => fn())\n  }\n}\n","import Subject from './subject'\n\nexport const allChanges = 'all_changes' + Math.random().toFixed(4)\n\ninterface Dict {\n  [k: string]: any\n}\n\ntype Key = string\n\nexport default class Stateful<S extends {} = Dict> extends Subject {\n  state: S\n  initialState: S\n  isFirstChange: boolean\n  hasChanged: Key[]\n\n  constructor(initialState: S = {} as S) {\n    super()\n\n    this.state = clone(initialState || ({} as S))\n    this.initialState = initialState\n    this.isFirstChange = true\n    this.hasChanged = []\n\n    this.setState = this.setState.bind(this)\n    this.changed = this.changed.bind(this)\n    this.listen = this.listen.bind(this)\n  }\n\n  setState(stateOrFn) {\n    // You can pass a function that returns state or a plain object\n    const prevState = clone(this.state)\n    const recievedState = typeof stateOrFn === 'function' ? stateOrFn(this.state) : stateOrFn\n\n    // Only get keys which have changed\n    const changedKeys = Object.keys(recievedState).filter(key => recievedState[key] !== prevState[key])\n\n    if (!changedKeys.length) return\n\n    // Merge this.state with the recievedState\n    const currentState = clone(this.state, recievedState)\n    this.state = currentState\n\n    const update = {\n      prevState,\n      currentState,\n      recievedState,\n      state: currentState,\n      self: this,\n      currentChanges: changedKeys,\n      changed: changedKeys,\n      isFirstChange: this.isFirstChange\n    }\n\n    // This emits changes for listeners that are listening without a key\n    // eg this.changed(() => { ...something changed }) || this.changed('myKey', () => { ...mykey changed })\n    this.emit(allChanges, update)\n\n    // Emit events for all the keys in changedKeys\n    for (const key of changedKeys) {\n      const changeForKey = clone(update, { isFirstChange: !this.hasChanged.includes(key) })\n      this.emit(key, changeForKey)\n    }\n\n    // No longer the first change\n    if (changedKeys.length && this.isFirstChange) {\n      this.isFirstChange = false\n    }\n\n    // Add changed keys to hasChanged\n    this.hasChanged = [...this.hasChanged, ...changedKeys.filter(x => !this.hasChanged.includes(x))]\n  }\n\n  changed(...args) {\n    // On is inherited from Subject\n    if (args.length === 2) {\n      return this.on(args[0], args[1])\n    } else {\n      return this.on(allChanges, args[0])\n    }\n  }\n\n  // Alias for this.changed(() => {})\n  listen(fn) {\n    return this.on(allChanges, fn)\n  }\n}\n\nfunction clone<T>(objs: T, ...rest: T[]) {\n  return Object.assign({}, objs, ...rest) as T\n}\n"]}