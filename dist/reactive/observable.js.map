{"version":3,"sources":["reactive/observable.ts"],"names":[],"mappings":"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","file":"observable.js","sourceRoot":"../src","sourcesContent":["interface Observer<T> {\n  next: Listener<T>\n  complete?: Listener\n  error?: Listener<Error>\n}\ntype Listener<T = any> = (value: T) => any\ntype Cleanup = () => any\ninterface Dict<T> {\n  [key: string]: T\n}\nexport interface ListenerGroup {\n  next: Dict<Listener>\n  error: Dict<Listener>\n  complete: Dict<Listener>\n}\n\nclass Observable<T = any> {\n  private index: number = 0\n  private streamSource: (observer: Observable<T>) => Cleanup\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup = () => {}\n  private listeners: ListenerGroup = {\n    next: {},\n    error: {},\n    complete: {}\n  }\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: Observable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(key: 'next' | 'error' | 'complete', val?: T | Error) {\n    for (const k in this.listeners[key]) {\n      this.listeners[key][k](val)\n    }\n  }\n\n  /* Emit the next value */\n  next(value: T) {\n    this.emit('next', value)\n  }\n\n  error(error: Error) {\n    this.emit('error', error)\n  }\n\n  /* Emit an end event to everything */\n  complete() {\n    this.emit('complete')\n    this.destroy()\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup() {\n    if (!this.activeListeners) {\n      this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n    const key = this.getKey()\n\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<T>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        this.listeners[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        objKeys.forEach(objKey => {\n          delete this.listeners[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    } else {\n      this.listeners.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.listeners.next[key]\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nfunction isObserver<T>(obj: any): obj is Observer<T> {\n  if (typeof obj === 'object' && obj.next) {\n    return true\n  }\n}\n\nfunction isListener<T>(fn: any): fn is Listener<T> {\n  if (typeof fn === 'function') {\n    return true\n  }\n}\n\n/* Same as regular observable except it always emits the last value */\nexport class BehaviourSubject<T = any> extends Observable<T> {\n  lastNext: T\n\n  next(value: T) {\n    this.emit('next', value)\n    this.lastNext = value\n  }\n\n  /* Very similar to observable except it sends the most recent value on subscribe */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    const observer = super.subscribe(fnOrObserver)\n    if (isObserver(observer.observer)) {\n      observer.observer.next(this.lastNext)\n    } else if (isListener(fnOrObserver)) {\n      fnOrObserver(this.lastNext)\n    }\n    return observer\n  }\n}\n\ninterface ChannelAPI<C> {\n  onSubscribe: (channel: C) => any\n  onUnsubscribe: (channel: C) => any\n  destroy: () => any\n}\n\nfunction isChannelAPI<C>(arg): arg is ChannelAPI<C> {\n  return Boolean(arg.destroy)\n}\n\nexport class ChannelledObservable<C = any, V = any> {\n  private index: number = 0\n  private streamSource: (observer: ChannelledObservable<C, V>) => Cleanup | ChannelAPI<C>\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup | ChannelAPI<C> = () => {}\n  channels: Map<C, ListenerGroup> = new Map()\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: ChannelledObservable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(channel: C, key: 'next' | 'error' | 'complete', val?: V | Error) {\n    const c = this.channels.get(channel)\n    for (const k in c[key]) {\n      c[key][k](val)\n    }\n  }\n\n  next(channel: C, value: V) {\n    this.emit(channel, 'next', value)\n  }\n  error(channel: C, error: Error) {\n    this.emit(channel, 'error', error)\n  }\n  complete(channel: C) {\n    this.emit(channel, 'complete')\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup(channel: C) {\n    if (isChannelAPI(this.unsubscribeFromSource)) this.unsubscribeFromSource.onUnsubscribe(channel)\n\n    if (!this.activeListeners) {\n      isChannelAPI(this.unsubscribeFromSource) ? this.unsubscribeFromSource.destroy() : this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(channelKey: C, fnOrObserver: Listener<V> | Observer<V>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n\n    let channel = this.channels.get(channelKey)\n    const key = this.getKey()\n\n    if (!channel) {\n      channel = { next: {}, error: {}, complete: {} }\n      this.channels.set(channelKey, channel)\n    }\n\n    if (isChannelAPI(this.unsubscribeFromSource)) {\n      this.unsubscribeFromSource.onSubscribe(channelKey)\n    }\n\n    /*  */\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<V>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        channel[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        const c = this.channels.get(channelKey)\n        objKeys.forEach(objKey => {\n          delete c[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n\n    if (isListener(fnOrObserver)) {\n      channel.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.channels.get(channelKey).next[key]\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nexport default Observable\n"]}