{"version":3,"sources":["reactive/observable.ts","../node_modules/intersection-observer/intersection-observer.js","observers/create-intersection-observable.ts"],"names":[],"mappings":"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":"create-intersection-observable.js","sourceRoot":"../src","sourcesContent":["interface Observer<T> {\n  next: Listener<T>\n  complete?: Listener\n  error?: Listener<Error>\n}\ntype Listener<T = any> = (value: T) => any\ntype Cleanup = () => any\ninterface Dict<T> {\n  [key: string]: T\n}\nexport interface ListenerGroup {\n  next: Dict<Listener>\n  error: Dict<Listener>\n  complete: Dict<Listener>\n}\n\nclass Observable<T = any> {\n  private index: number = 0\n  private streamSource: (observer: Observable<T>) => Cleanup\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup = () => {}\n  private listeners: ListenerGroup = {\n    next: {},\n    error: {},\n    complete: {}\n  }\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: Observable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(key: 'next' | 'error' | 'complete', val?: T | Error) {\n    for (const k in this.listeners[key]) {\n      this.listeners[key][k](val)\n    }\n  }\n\n  /* Emit the next value */\n  next(value: T) {\n    this.emit('next', value)\n  }\n\n  error(error: Error) {\n    this.emit('error', error)\n  }\n\n  /* Emit an end event to everything */\n  complete() {\n    this.emit('complete')\n    this.destroy()\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup() {\n    if (!this.activeListeners) {\n      this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n    const key = this.getKey()\n\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<T>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        this.listeners[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        objKeys.forEach(objKey => {\n          delete this.listeners[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    } else {\n      this.listeners.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.listeners.next[key]\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nfunction isObserver<T>(obj: any): obj is Observer<T> {\n  if (typeof obj === 'object' && obj.next) {\n    return true\n  }\n}\n\nfunction isListener<T>(fn: any): fn is Listener<T> {\n  if (typeof fn === 'function') {\n    return true\n  }\n}\n\n/* Same as regular observable except it always emits the last value */\nexport class BehaviourSubject<T = any> extends Observable<T> {\n  lastNext: T\n\n  next(value: T) {\n    this.emit('next', value)\n    this.lastNext = value\n  }\n\n  /* Very similar to observable except it sends the most recent value on subscribe */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    const observer = super.subscribe(fnOrObserver)\n    if (isObserver(observer.observer)) {\n      observer.observer.next(this.lastNext)\n    } else if (isListener(fnOrObserver)) {\n      fnOrObserver(this.lastNext)\n    }\n    return observer\n  }\n}\n\ninterface ChannelAPI<C> {\n  onSubscribe: (channel: C) => any\n  onUnsubscribe: (channel: C) => any\n  destroy: () => any\n}\n\nfunction isChannelAPI<C>(arg): arg is ChannelAPI<C> {\n  return Boolean(arg.destroy)\n}\n\nexport class ChannelledObservable<C = any, V = any> {\n  private index: number = 0\n  private streamSource: (observer: ChannelledObservable<C, V>) => Cleanup | ChannelAPI<C>\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup | ChannelAPI<C> = () => {}\n  channels: Map<C, ListenerGroup> = new Map()\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: ChannelledObservable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(channel: C, key: 'next' | 'error' | 'complete', val?: V | Error) {\n    const c = this.channels.get(channel)\n    for (const k in c[key]) {\n      c[key][k](val)\n    }\n  }\n\n  next(channel: C, value: V) {\n    this.emit(channel, 'next', value)\n  }\n  error(channel: C, error: Error) {\n    this.emit(channel, 'error', error)\n  }\n  complete(channel: C) {\n    this.emit(channel, 'complete')\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup(channel: C) {\n    if (isChannelAPI(this.unsubscribeFromSource)) this.unsubscribeFromSource.onUnsubscribe(channel)\n\n    if (!this.activeListeners) {\n      isChannelAPI(this.unsubscribeFromSource) ? this.unsubscribeFromSource.destroy() : this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(channelKey: C, fnOrObserver: Listener<V> | Observer<V>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n\n    let channel = this.channels.get(channelKey)\n    const key = this.getKey()\n\n    if (!channel) {\n      channel = { next: {}, error: {}, complete: {} }\n      this.channels.set(channelKey, channel)\n    }\n\n    if (isChannelAPI(this.unsubscribeFromSource)) {\n      this.unsubscribeFromSource.onSubscribe(channelKey)\n    }\n\n    /*  */\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<V>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        channel[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        const c = this.channels.get(channelKey)\n        objKeys.forEach(objKey => {\n          delete c[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n\n    if (isListener(fnOrObserver)) {\n      channel.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.channels.get(channelKey).next[key]\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nexport default Observable\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  if (doc != (this.root && this.root.ownerDocument || document)) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc = (this.root && this.root.ownerDocument || document);\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        parentRect = rootRect;\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target) &&\n    (!this.root || this.root.ownerDocument == target.ownerDocument);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {Object} parentBoundingRect The parent's bound client rect.\n * @param {Object} parentIntersectionRect The parent's own intersection rect.\n * @return {Object} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n","/* Intersection observer polyfill for IE */\r\nimport { ChannelledObservable } from '../reactive/observable'\r\n\r\nexport class CustomIntersectionObserverEntry\r\n  implements IntersectionObserverEntry {\r\n  isAbove: boolean\r\n  isBelow: boolean\r\n  isCompletelyInView: boolean\r\n  boundingClientRect: DOMRectReadOnly\r\n  intersectionRatio: number\r\n  intersectionRect: DOMRectReadOnly\r\n  isIntersecting: boolean\r\n  rootBounds: DOMRectReadOnly | null\r\n  target: Element\r\n  time: number\r\n\r\n  constructor(\r\n    entry: IntersectionObserverEntry,\r\n    winHeight: number = window.innerHeight\r\n  ) {\r\n    this.boundingClientRect = entry.boundingClientRect\r\n    this.intersectionRatio = entry.intersectionRatio\r\n    this.intersectionRect = entry.intersectionRect\r\n    this.isIntersecting = entry.isIntersecting\r\n    this.rootBounds = entry.rootBounds\r\n    this.target = entry.target\r\n    this.time = entry.time\r\n\r\n    this.isCompletelyInView = entry.intersectionRatio === 1\r\n    this.isAbove =\r\n      entry.intersectionRatio < 1 ? entry.boundingClientRect.top < 0 : false\r\n    this.isBelow =\r\n      entry.intersectionRatio < 1\r\n        ? entry.boundingClientRect.bottom > winHeight\r\n        : false\r\n  }\r\n}\r\n\r\nexport function createIntersectionObservable(\r\n  root: Window | Element = window,\r\n  opts: IntersectionObserverInit = {}\r\n) {\r\n  const observable = new ChannelledObservable<\r\n    Element,\r\n    CustomIntersectionObserverEntry\r\n  >(({ next, error, complete }) => {\r\n    /* Intersection observer targets the window by default */\r\n    const options = { ...opts }\r\n\r\n    /* If root isnt the window set it to be the intersection observer root */\r\n    if (isElement(root)) {\r\n      options.root = root\r\n    }\r\n\r\n    let disconnected = false\r\n    let started = false\r\n    let source: Promise<IntersectionObserver> | IntersectionObserver\r\n\r\n    async function getSource() {\r\n      if (!window.IntersectionObserver) {\r\n        await import('intersection-observer')\r\n      }\r\n      if (disconnected) return\r\n      started = true\r\n      return new IntersectionObserver((entries) => {\r\n        const winHeight = window.innerHeight\r\n\r\n        entries.forEach((entry) => {\r\n          const customEntry = new CustomIntersectionObserverEntry(\r\n            entry,\r\n            winHeight\r\n          )\r\n          /* Get the callback for the specific element */\r\n          next(entry.target, customEntry)\r\n        })\r\n      }, options)\r\n    }\r\n\r\n    source = getSource().then((r) => {\r\n      source = r\r\n      return r\r\n    })\r\n\r\n    /* Entries is an array of entries for every element that changed */\r\n    return {\r\n      async onSubscribe(channel) {\r\n        let src = await source\r\n        src.observe(channel)\r\n      },\r\n      async onUnsubscribe(channel) {\r\n        let src = await source\r\n        src.unobserve(channel)\r\n      },\r\n      async destroy() {\r\n        disconnected = true\r\n        if (started) {\r\n          let src = await source\r\n          src.disconnect()\r\n        }\r\n      },\r\n    }\r\n  })\r\n  return observable\r\n}\r\n\r\nfunction isElement(arg: Window | Element): arg is Element {\r\n  return arg && arg !== window\r\n}\r\n"]}