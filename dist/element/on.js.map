{"version":3,"sources":["element/on.ts"],"names":[],"mappings":";;;;;AAEA,IAAM,SAAS,GAAG,GAAlB;;AAiBA,SAAgB,EAAhB,CACE,OADF,EAEE,GAFF,EAGE,QAHF,EAG0C;AAExC;AACA,MAAM,MAAM,GAAG,KAAK,CAAC,OAAN,CAAc,GAAd,IAAqB,GAArB,GAA2B,CAAC,GAAD,CAA1C;AAEA;;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAM;AAAK,WAAA,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,QAAhC,CAAA;AAAyC,GAAnE;AAEA;;AACA,SAAO,YAAA;AACL,WAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAM;AAAK,aAAA,OAAO,CAAC,mBAAR,CAA4B,KAA5B,EAAmC,QAAnC,CAAA;AAA4C,KAAtE,CAAA;AAAuE,GADzE;AAED;;AAdD,OAAA,CAAA,EAAA,GAAA,EAAA","file":"on.js","sourceRoot":"../src","sourcesContent":["type Source = Element | Window | Animation\n\nconst DELIMITER = ' '\n\nexport type Listener<E, T> = (e: E & { target: T }) => any\ntype Disposer = () => any\n\nexport type GetEventMap<T> = T extends Window\n  ? WindowEventMap\n  : T extends Document\n  ? DocumentEventMap\n  : T extends HTMLElement\n  ? HTMLElementEventMap\n  : T extends Animation\n  ? AnimationEventMap\n  : T extends HTMLMediaElement\n  ? HTMLMediaElementEventMap\n  : string\n\nexport function on<T extends EventTarget, M = keyof GetEventMap<T>>(\n  element: T,\n  eve: keyof GetEventMap<T>,\n  callback: Listener<GetEventMap<T>[M], T>\n): Disposer {\n  /* Split events by space */\n  const events = Array.isArray(eve) ? eve : [eve]\n\n  /* Subscribe to all the events! */\n  events.forEach((event) => element.addEventListener(event, callback))\n\n  /* Return a disposer */\n  return () =>\n    events.forEach((event) => element.removeEventListener(event, callback))\n}\n"]}