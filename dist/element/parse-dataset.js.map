{"version":3,"sources":["element/parse-dataset.ts"],"names":[],"mappings":";;;;;;AAAA,SAAgB,YAAhB,CAA6B,OAA7B,EAAiD;AAC/C,MAAM,MAAM,GAAyB,EAArC;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAApB,CAAb;;AACA,OAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAhB,EAAgB,EAAA,GAAA,MAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAsB;AAAjB,QAAI,GAAG,GAAA,MAAA,CAAA,EAAA,CAAP;;AACH,QAAI,OAAO,CAAC,OAAR,CAAgB,GAAhB,MAAyB,EAA7B,EAAiC;AAC/B,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAd;AACA;AACD;;AACD,QAAI;AACF,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAX,CAAd;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAd;AACD;AACF;;AACD,SAAO,MAAP;AACD;;AAfD,OAAA,CAAA,YAAA,GAAA,YAAA","file":"parse-dataset.js","sourceRoot":"../src","sourcesContent":["export function parseDataset(element: HTMLElement) {\n  const result: { [k: string]: any } = {}\n  const keys = Object.keys(element.dataset)\n  for (let key of keys) {\n    if (element.dataset[key] === '') {\n      result[key] = true\n      continue\n    }\n    try {\n      result[key] = JSON.parse(element.dataset[key])\n    } catch (e) {\n      result[key] = element.dataset[key]\n    }\n  }\n  return result\n}\n"]}