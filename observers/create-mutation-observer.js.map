{"version":3,"sources":["reactive/observable.ts","observers/create-mutation-observer.ts"],"names":[],"mappings":"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","file":"create-mutation-observer.js","sourceRoot":"src","sourcesContent":["interface Observer<T> {\n  next: Listener<T>\n  complete?: Listener\n  error?: Listener<Error>\n}\ntype Listener<T = any> = (value: T) => any\ntype Cleanup = () => any\ninterface Dict<T> {\n  [key: string]: T\n}\nexport interface ListenerGroup {\n  next: Dict<Listener>\n  error: Dict<Listener>\n  complete: Dict<Listener>\n}\n\nclass Observable<T = any> {\n  private index: number = 0\n  private streamSource: (observer: Observable<T>) => Cleanup\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup = () => {}\n  private listeners: ListenerGroup = {\n    next: {},\n    error: {},\n    complete: {}\n  }\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: Observable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(key: 'next' | 'error' | 'complete', val?: T | Error) {\n    for (const k in this.listeners[key]) {\n      this.listeners[key][k](val)\n    }\n  }\n\n  /* Emit the next value */\n  next(value: T) {\n    this.emit('next', value)\n  }\n\n  error(error: Error) {\n    this.emit('error', error)\n  }\n\n  /* Emit an end event to everything */\n  complete() {\n    this.emit('complete')\n    this.destroy()\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup() {\n    if (!this.activeListeners) {\n      this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n    const key = this.getKey()\n\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<T>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        this.listeners[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        objKeys.forEach(objKey => {\n          delete this.listeners[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    } else {\n      this.listeners.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.listeners.next[key]\n        delete this.cancels[key]\n        this.cleanup()\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nfunction isObserver<T>(obj: any): obj is Observer<T> {\n  if (typeof obj === 'object' && obj.next) {\n    return true\n  }\n}\n\nfunction isListener<T>(fn: any): fn is Listener<T> {\n  if (typeof fn === 'function') {\n    return true\n  }\n}\n\n/* Same as regular observable except it always emits the last value */\nexport class BehaviourSubject<T = any> extends Observable<T> {\n  lastNext: T\n\n  next(value: T) {\n    this.emit('next', value)\n    this.lastNext = value\n  }\n\n  /* Very similar to observable except it sends the most recent value on subscribe */\n  subscribe(fnOrObserver: Listener<T> | Observer<T>) {\n    const observer = super.subscribe(fnOrObserver)\n    if (isObserver(observer.observer)) {\n      observer.observer.next(this.lastNext)\n    } else if (isListener(fnOrObserver)) {\n      fnOrObserver(this.lastNext)\n    }\n    return observer\n  }\n}\n\ninterface ChannelAPI<C> {\n  onSubscribe: (channel: C) => any\n  onUnsubscribe: (channel: C) => any\n  destroy: () => any\n}\n\nfunction isChannelAPI<C>(arg): arg is ChannelAPI<C> {\n  return Boolean(arg.destroy)\n}\n\nexport class ChannelledObservable<C = any, V = any> {\n  private index: number = 0\n  private streamSource: (observer: ChannelledObservable<C, V>) => Cleanup | ChannelAPI<C>\n  private subscribed: boolean = false\n  private activeListeners = 0\n  private unsubscribeFromSource: Cleanup | ChannelAPI<C> = () => {}\n  channels: Map<C, ListenerGroup> = new Map()\n  private cancels: Dict<Cleanup> = {}\n\n  constructor(source: ChannelledObservable['streamSource']) {\n    this.streamSource = source\n    this.next = this.next.bind(this)\n    this.complete = this.complete.bind(this)\n    this.error = this.error.bind(this)\n  }\n\n  private getKey() {\n    return 'k' + this.index++\n  }\n\n  emit(channel: C, key: 'next' | 'error' | 'complete', val?: V | Error) {\n    const c = this.channels.get(channel)\n    for (const k in c[key]) {\n      c[key][k](val)\n    }\n  }\n\n  next(channel: C, value: V) {\n    this.emit(channel, 'next', value)\n  }\n  error(channel: C, error: Error) {\n    this.emit(channel, 'error', error)\n  }\n  complete(channel: C) {\n    this.emit(channel, 'complete')\n  }\n\n  destroy() {\n    for (const k in this.cancels) {\n      this.cancels[k]()\n    }\n  }\n\n  onDestroy (fn:Cleanup) {\n    const key = this.getKey()\n\n    this.cancels[key] = () => {\n      delete this.cancels[key]\n      fn()\n    }\n  }\n\n  /* \n  This is called when a observer unsubscribes\n  if it was the last remaining observer then it unsubscribes from the source\n  */\n  cleanup(channel: C) {\n    if (isChannelAPI(this.unsubscribeFromSource)) this.unsubscribeFromSource.onUnsubscribe(channel)\n\n    if (!this.activeListeners) {\n      isChannelAPI(this.unsubscribeFromSource) ? this.unsubscribeFromSource.destroy() : this.unsubscribeFromSource()\n    }\n  }\n\n  /*\n  Subscribe can be passed either a \n  Listener: (nextVal) => {} \n    or an\n  Observer: { next: nextVal => {}, error: err => {}, }\n  */\n  subscribe(channelKey: C, fnOrObserver: Listener<V> | Observer<V>) {\n    if (!this.subscribed) {\n      this.unsubscribeFromSource = this.streamSource(this)\n      this.subscribed = true\n    }\n\n    let channel = this.channels.get(channelKey)\n    const key = this.getKey()\n\n    if (!channel) {\n      channel = { next: {}, error: {}, complete: {} }\n      this.channels.set(channelKey, channel)\n    }\n\n    if (isChannelAPI(this.unsubscribeFromSource)) {\n      this.unsubscribeFromSource.onSubscribe(channelKey)\n    }\n\n    /*  */\n    if (isObserver(fnOrObserver)) {\n      const objKeys = Object.keys(fnOrObserver) as (keyof Observer<V>)[]\n      this.activeListeners += 1\n\n      objKeys.forEach(objKey => {\n        channel[objKey][key] = fnOrObserver[objKey]\n      })\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        const c = this.channels.get(channelKey)\n        objKeys.forEach(objKey => {\n          delete c[objKey][key]\n        })\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key] = cancel\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n\n    if (isListener(fnOrObserver)) {\n      channel.next[key] = fnOrObserver\n      this.activeListeners += 1\n\n      const cancel = () => {\n        this.activeListeners -= 1\n        delete this.channels.get(channelKey).next[key]\n        delete this.cancels[key]\n        this.cleanup(channelKey)\n      }\n\n      this.cancels[key]\n\n      return { unsubscribe: cancel, observer: fnOrObserver }\n    }\n  }\n}\n\nexport default Observable\n","/* Intersection observer polyfill for IE */\r\nimport { ChannelledObservable } from '../reactive/observable'\r\n\r\nexport function createMutationObservable(\r\n  config: MutationObserverInit = {\r\n    characterData: false,\r\n    attributes: true,\r\n    childList: true,\r\n  }\r\n) {\r\n  const observable = new ChannelledObservable<Element, typeof MutationObserver>(\r\n    ({ next }) => {\r\n      let sources = new Map()\r\n\r\n      return {\r\n        onSubscribe(channel) {\r\n          const observer = new MutationObserver((mutations) =>\r\n            next(channel, mutations)\r\n          )\r\n          sources.set(channel, observer)\r\n          observer.observe(channel, config)\r\n        },\r\n        onUnsubscribe(channel) {\r\n          const observer = sources.get(channel)\r\n          observer.disconnect()\r\n        },\r\n        destroy() {\r\n          for (let source of sources.values()) {\r\n            source.disconnect()\r\n          }\r\n          sources = new Map()\r\n        },\r\n      }\r\n    }\r\n  )\r\n\r\n  return observable\r\n}\r\n"]}