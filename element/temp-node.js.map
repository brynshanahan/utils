{"version":3,"sources":["element/is.ts","element/temp-node.ts"],"names":[],"mappings":"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","file":"temp-node.js","sourceRoot":"src","sourcesContent":["export const is = {\n  script(t: Element): t is HTMLScriptElement {\n    return t.tagName === 'script'\n  },\n  title(t: Element): t is HTMLTitleElement {\n    return t.tagName === 'title'\n  },\n  style(t: Element): t is HTMLStyleElement {\n    return t.tagName === 'style'\n  },\n  link(t: Element): t is HTMLLinkElement {\n    return t.tagName === 'link'\n  },\n  element(t: Element | Text): t is Element {\n    return t.nodeType === Node.ELEMENT_NODE\n  },\n  text(t: Element | Text): t is Text {\n    return t.nodeType === Node.TEXT_NODE\n  },\n  comment(t: any): t is Comment {\n    return t.nodeType === Node.COMMENT_NODE\n  },\n}\n","/* Doesn't affect the real dom when being appended to */\nimport { is } from \"./is\"\ntype Nodey = Element\n\nexport default class TempNode {\n  nodeList: Set<Element | Text>\n  element: Nodey\n\n  constructor(element: Nodey) {\n    this.nodeList = new Set([...element.children])\n    this.element = element\n\n    for (let prop in element) {\n      if (typeof this[prop] === \"undefined\") {\n        Object.defineProperty(this, prop, {\n          get() {\n            return element[prop]\n          },\n          set(value) {\n            return (element[prop] = value)\n          }\n        })\n      }\n    }\n  }\n\n  get innerHTML() {\n    let result = \"\"\n    for (let child of this.nodeList) {\n      result += is.element(child) ? child.innerHTML : child.textContent\n    }\n    return result\n  }\n\n  get textContent() {\n    let result = \"\"\n    for (let child of this.nodeList) {\n      result += child.textContent\n    }\n    return result\n  }\n\n  querySelector(query: string) {\n    for (let child of this.nodeList) {\n      let result = child.querySelector(query)\n      if (result) return result\n    }\n    return null\n  }\n\n  querySelectorAll(query: string) {\n    const children = []\n    for (let child of this.nodeList) {\n      children.push(...child.querySelectorAll(query))\n    }\n    return children\n  }\n\n  appendChild(node: Element) {\n    this.nodeList.add(node)\n  }\n\n  append(node: Element) {\n    this.nodeList.add(node)\n  }\n\n  appendTo(node: Element) {\n    for (let child of this.nodeList) {\n      this.element.appendChild(child)\n    }\n    node.appendChild(this.element)\n  }\n}\n"]}