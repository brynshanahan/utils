{"version":3,"sources":["element/proxy-node.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,UAAT,CAAoB,OAApB,EAA6B,OAA7B,EAAoC;AAClC,MAAI,MAAM,GAAG,SAAb;;AADkC,6CAEf,OAFe;AAAA;;AAAA;AAElC,wDAA4B;AAAA,UAAnB,MAAmB;AAC1B,UAAI,IAAI,SAAR;AACA,UAAI,CAAC,GAAG,MAAR;;AAF0B,kDAGP,OAHO;AAAA;;AAAA;AAG1B,+DAA4B;AAAA,cAAnB,MAAmB;;AAC1B,cAAI,MAAM,CAAC,GAAX,EAAgB;AACd,YAAA,IAAI,GAAG,CAAP;AACA,YAAA,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAR,CAAL;AACD,WAHD,MAGO,IAAI,MAAM,CAAC,GAAX,EAAgB;AACrB,YAAA,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,GAAP,CAAW,CAAX,CAAD,CAAD,GAAmB,MAAM,CAAC,GAAP,CAAW,CAAX,CAA5B;AACD,WAFM,MAEA,IAAI,MAAM,CAAC,KAAX,EAAkB;AAAA,+CACR,MAAM,CAAC,KADC;AAAA,gBAChB,IADgB;;AAEvB,gBAAI,CAAC,MAAL,EAAa;AACX,cAAA,MAAM,GAAG,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,CAAC,IAAD,CAAd,CAAT;AACD,aAFD,MAEO;AACL,cAAA,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,CAAC,IAAD,CAAd;AACD;AACF;AACF;AAjByB;AAAA;AAAA;AAAA;AAAA;AAkB3B;AApBiC;AAAA;AAAA;AAAA;AAAA;;AAsBlC,SAAO,MAAP;AACD;;AAED,SAAS,eAAT,CAAyB,QAAzB,EAAiC;AAC/B,MAAM,aAAa,GAAG,QAAQ,CAAC,CAAD,CAA9B;AACA,MAAI,OAAO,GAAG,EAAd;;AAEA,WAAS,WAAT,CAAqB,GAArB,EAAsC;AAAA,QAAZ,OAAY,uEAAF,EAAE;AACpC,QAAI,IAAI,GAAG,IAAI,KAAJ,CAAU,GAAV,EAAe;AACxB,MAAA,GADwB,eACpB,MADoB,EACZ,IADY,EACR;AACd,YAAI,GAAG,GAAG,MAAM,CAAC,IAAD,CAAhB;;AACA,YAAI,QAAO,GAAP,MAAe,QAAf,IAA2B,OAAO,GAAP,KAAe,UAA9C,EAA0D;AACxD,iBAAO,WAAW,CAAC,GAAD,+BAAU,OAAV,IAAmB;AAAE,YAAA,GAAG,EAAE;AAAP,WAAnB,GAAlB;AACD;;AACD,eAAO,GAAP;AACD,OAPuB;AAQxB,MAAA,GARwB,eAQpB,MARoB,EAQZ,IARY,EAQN,KARM,EAQD;AACrB,QAAA,OAAO,CAAC,IAAR,CAAa;AAAE,UAAA,GAAG,EAAE,CAAC,IAAD,EAAO,KAAP;AAAP,SAAb;AACA,QAAA,UAAU,CAAC,QAAD,EAAW,OAAX,CAAV;AACD,OAXuB;AAYxB,MAAA,KAZwB,iBAYlB,MAZkB,EAYV,OAZU,EAYD,aAZC,EAYY;AAClC,QAAA,OAAO,CAAC,IAAR,CAAa;AAAE,UAAA,KAAK,EAAE;AAAT,SAAb;AACA,eAAO,UAAU,CAAC,QAAD,EAAW,OAAX,CAAjB;AACD;AAfuB,KAAf,CAAX;AAkBA,IAAA,OAAO,CAAC,IAAR,CAAa,IAAb;AAEA,WAAO,IAAP;AACD;;AAED,SAAO,WAAW,CAAC,aAAD,CAAlB;AACD","file":"proxy-node.js","sourceRoot":"src","sourcesContent":["function runActions(targets, actions) {\n  let result = undefined\n  for (let target of targets) {\n    let prev\n    let t = target\n    for (let action of actions) {\n      if (action.get) {\n        prev = t\n        t = t[action.get]\n      } else if (action.set) {\n        result = t[action.set[0]] = action.set[1]\n      } else if (action.apply) {\n        const [args] = action.apply\n        if (!result) {\n          result = t.apply(prev, [args])\n        } else {\n          t.apply(prev, [args])\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nfunction createProxyNode(elements) {\n  const targetElement = elements[0]\n  let proxies = []\n\n  function createProxy(obj, actions = []) {\n    let prox = new Proxy(obj, {\n      get(target, prop) {\n        let val = target[prop]\n        if (typeof val === 'object' || typeof val === 'function') {\n          return createProxy(val, [...actions, { get: prop }])\n        }\n        return val\n      },\n      set(target, prop, value) {\n        actions.push({ set: [prop, value] })\n        runActions(elements, actions)\n      },\n      apply(target, thisArg, argumentsList) {\n        actions.push({ apply: argumentsList })\n        return runActions(elements, actions)\n      }\n    })\n\n    proxies.push(prox)\n\n    return prox\n  }\n\n  return createProxy(targetElement)\n}\n"]}